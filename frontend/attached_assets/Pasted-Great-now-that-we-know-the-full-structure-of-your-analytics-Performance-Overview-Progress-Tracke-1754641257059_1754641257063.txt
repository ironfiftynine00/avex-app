Great — now that we know the full structure of your analytics (Performance Overview, Progress Tracker, and Achievement Badges), here's a complete plan to **sync everything for a unified and accurate analytics system**.

---

## ✅ SYSTEM STRUCTURE OVERVIEW

### 1. **Performance Overview (Global Stats)**

| Label            | Based On                                                |
| ---------------- | ------------------------------------------------------- |
| Total Exams      | Count of finished **Mock Exams**                        |
| Pass Rate        | % of **Mock Exams** where score ≥ passing (e.g. 70%)    |
| Avg Score        | Average of all **Mock Exam scores**                     |
| Overall Progress | Based on **subtopic-wise completion** (explained below) |

---

### 2. **Progress Tracker (Per Category Stats)**

Each category (e.g., “Aircraft Maintenance”) tracks:

| Label             | Based On                                                |
| ----------------- | ------------------------------------------------------- |
| Attempts          | Total **quizzes/mock exams** attempted in that category |
| Best Score        | Highest **score** from any quiz or mock in the category |
| Last Attempt      | **Timestamp/date** of last quiz/mock for that category  |
| Category Progress | Avg progress of subtopics under that category           |

---

### 3. **Achievement Badges**

| Badge Name       | Trigger Condition                                    |
| ---------------- | ---------------------------------------------------- |
| Rookie Wrencher  | Account created                                      |
| Study Starter    | Completed first **practice session**                 |
| First Pass!      | Passed first **mock exam**                           |
| Air Law Ace      | Passed Air Law category (≥70%)                       |
| Maintenance Pro  | Passed all **Aircraft Maintenance** subtopics (≥70%) |
| Consistent Cadet | Studied 7 days in a row (track dates with activity)  |
| Quiz Champion    | Won 3 **battle quizzes**                             |
| Full License!    | All **categories** have ≥70% best score              |

---

## 🔁 FULLY INTEGRATED FLOW

Here’s how all components **connect and update** with each other:

---

### ✅ A. User Interacts (e.g., completes a quiz)

* Store:

  * Score
  * Category
  * Subtopics used
  * Timestamp
* Update:

  * **Per-category attempts**
  * **Best score** if this is highest
  * **Last attempt** date
  * **Overall progress** (update subtopic status if new)
* Check if:

  * Badge should be unlocked (e.g. first pass, score ≥70%, 3 wins)
  * Mock exam stats change global overview

---

### ✅ B. Backend Data Structure (Example)

```json
userData: {
  uid: "user123",
  badges: ["Rookie Wrencher"],
  stats: {
    totalExams: 5,
    passedExams: 3,
    averageScore: 78,
    overallProgress: 62
  },
  categories: {
    "Aircraft Maintenance": {
      attempts: 3,
      bestScore: 85,
      lastAttempt: "2025-08-08T10:15:00",
      subtopics: ["Aircraft Finishes", "Hydraulic & Pneumatic Power System"]
    },
    ...
  },
  progressBySubtopic: {
    "Aircraft Finishes": {
      reviewDone: true,
      practiceCount: 5,
      quizDone: true,
      includedInMockExam: true
    },
    ...
  },
  streak: {
    lastActive: "2025-08-08",
    count: 6
  }
}
```

---

### 📊 Final Visual Syncing in the UI

| UI Element           | Driven By                                                  |
| -------------------- | ---------------------------------------------------------- |
| Performance Overview | `userData.stats`                                           |
| Progress Tracker     | `userData.categories[...]` & subtopic progress aggregation |
| Badges               | `userData.badges`                                          |

---

## ✅ RECOMMENDED FUNCTION FLOW (Backend or Frontend)

```js
function updateAnalyticsOnQuizFinish(userId, score, category, subtopics, isMock) {
  // Load user data
  const user = getUserData(userId);

  // Update attempts & lastAttempt
  const cat = user.categories[category] || { attempts: 0, bestScore: 0, lastAttempt: null, subtopics: [] };
  cat.attempts += 1;
  cat.lastAttempt = new Date().toISOString();
  if (score > cat.bestScore) cat.bestScore = score;
  cat.subtopics = [...new Set([...cat.subtopics, ...subtopics])]; // merge subtopics
  user.categories[category] = cat;

  // Update total exams/pass rate if it's a mock
  if (isMock) {
    user.stats.totalExams += 1;
    if (score >= 70) user.stats.passedExams += 1;
  }

  // Recalculate average score
  user.stats.averageScore = recalculateAverageScore(userId);

  // Recalculate overall progress
  user.stats.overallProgress = calculateOverallProgress(user.progressBySubtopic);

  // Check and unlock badges
  user.badges = checkNewBadges(user);

  // Save user data
  saveUserData(userId, user);
}
```

---

### 🔒 Badges Check Example

```js
function checkNewBadges(user) {
  const badges = new Set(user.badges);

  if (user.stats.totalExams >= 1 && !badges.has("First Pass!") && user.stats.passedExams >= 1)
    badges.add("First Pass!");

  if (user.categories["Air Law & Airworthiness"]?.bestScore >= 70)
    badges.add("Air Law Ace");

  const allCatsPassed = Object.values(user.categories).every(cat => cat.bestScore >= 70);
  if (allCatsPassed) badges.add("Full License!");

  if (user.streak.count >= 7) badges.add("Consistent Cadet");

  return [...badges];
}
```

---

## ✅ Want a Working Template?

If you’re in Replit and want a working **JS file that handles analytics**, I can:

* Write a `userAnalytics.js` module
* Include JSON storage simulation
* Connect to your app events (like quiz submission)

Would you like me to generate that for you now?
